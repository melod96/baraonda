<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Board">

	<resultMap type="com.kh.baraonda.board.model.vo.Board" id="boardResultSet">
		<id property="board_no" column="BOARD_NO"/>
		<result property="board_type" column="BOARD_TYPE" />
		<result property="writing_type" column="WRITING_TYPE" />
		<result property="board_title" column="BOARD_TITLE" />
		<result property="board_content" column="BOARD_CONTENT"/>
		<result property="member_no" column="MEMBER_NO" />
		<result property="board_date" column="BOARD_DATE" />
		<result property="modify_date" column="MODIFY_DATE" />
		<result property="board_status" column="BOARD_STATUS" />
		<result property="board_count" column="BOARD_COUNT" />
	</resultMap>
 
 	<resultMap id="Comments" type="com.kh.baraonda.board.model.vo.Comments" >
 	   <result property="COMMENTS_CONTENT" column="COMMENTS_CONTENT" jdbcType="CLOB" javaType="java.lang.String" />
 	   <result property="COMMENTS_DATE" column="COMMENTS_DATE" />
 	   <result property="COMMENTS_NO" column="COMMENTS_NO" />
 	   <result property="BOARD_NO" column="BOARD_NO" />
 	   <result property="MEMBER_NO" column="MEMBER_NO" />
 	   <result property="COMMENTS_STATUS" column="COMMENTS_STATUS" />
 	   <result property="NICK_NAME" column="NICK_NAME" />
	</resultMap>
	
	<resultMap id="boardDetail" type="HashMap" >
 	   <result property="BOARD_CONTENT" column="BOARD_CONTENT" jdbcType="CLOB" javaType="java.lang.String" />
 	   <result property="BOARD_TITLE" column="BOARD_TITLE" />
 	   <result property="BOARD_DATE" column="BOARD_DATE" />
 	   <result property="BOARD_COUNT" column="BOARD_COUNT" />
 	   <result property="NICK_NAME" column="NICK_NAME" />
 	   <result property="COMMENTS_COUNT" column="COMMENTS_COUNT" />
 	   <result property="BOARD_NO" column="BOARD_NO" />
 	   <result property="WRITING_TYPE" column="WRITING_TYPE" />
 	   <result property="MEMBER_NO" column="MEMBER_NO" />
 	   
	</resultMap>
		<resultMap type="com.kh.baraonda.board.model.vo.Home" id="homeResultSet">
	
		<id property="board_no" column="BOARD_NO"/>
		<result property="board_type" column="BOARD_TYPE" />
		<result property="writing_type" column="WRITING_TYPE" />
		<result property="board_title" column="BOARD_TITLE" />
		<result property="board_content" column="BOARD_CONTENT"/>
		<result property="member_no" column="MEMBER_NO" />
		<result property="board_date" column="BOARD_DATE" />
		<result property="modify_date" column="MODIFY_DATE" />
		<result property="board_status" column="BOARD_STATUS" />
		<result property="board_count" column="BOARD_COUNT" />
		<result property="board_good" column="BOARD_GOOD" />
		
		<result property="nick_name" column="NICK_NAME" />
		<result property="marking_type" column="MARKING_TYPE" />
		
		<result property="files_no" column="FILES_NO" />
		<result property="f_reference_no" column="F_REFERENCE_NO" />
		<result property="files_title" column="FILES_TITLE" />
		<result property="files_change_title" column="FILES_CHANGE_TITLE" />
		<result property="files_type" column="FILES_TYPE" />
		<result property="files_root" column="FILES_ROOT" />
		<result property="files_secession" column="FILES_SECESSION" />
		<result property="profile_root" column="PROFILE_ROOT" />
		<result property="profile" column="FILES_ROOT" />
	</resultMap>
 
 	<!-- 게시글 목록 조회 -->
 	<!-- WRITING_TYPE값만 사용해서 출력 -->
	<select id="listAll" resultType="java.util.HashMap" parameterType="java.util.List">
		SELECT *
		FROM BOARD B
		LEFT JOIN MEMBER M ON(B.MEMBER_NO = M.MEMBER_NO)
		WHERE B.WRITING_TYPE = #{WRITING_TYPE} AND B.BOARD_STATUS = 0
		ORDER BY B.BOARD_NO DESC
		
	</select>
	<!-- 게시글 페이징 처리 -->
	<select id="selectBoardListCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD
	</select>
	
	
	<!-- 게시글 조회수 증가 처리 -->
	<update id="increaseViewCnt">
		UPDATE BOARD SET BOARD_COUNT = BOARD_COUNT + 1
		WHERE BOARD_NO = #{BOARD_NO}
	</update>
	
	<!-- 게시글 상세보기(작성자, 제목, 내용, 날짜, 조회수, 댓글수) -->
	<select id="Board.detail" resultType="java.util.HashMap" parameterType = "int" resultMap="boardDetail">
		SELECT B.BOARD_TITLE, B.BOARD_CONTENT, B.BOARD_DATE, B.BOARD_COUNT, M.NICK_NAME, B.BOARD_NO, B.WRITING_TYPE, B.MEMBER_NO,
             (SELECT COUNT(*)
              FROM COMMENTS C
              JOIN BOARD B ON(B.BOARD_NO = C.BOARD_NO)
              WHERE B.BOARD_NO = #{BOARD_NO} AND C.COMMENTS_STATUS = 0) AS COMMENTS_COUNT
		FROM BOARD B
		JOIN MEMBER M ON(B.MEMBER_NO = M.MEMBER_NO)
		WHERE B.BOARD_NO = #{BOARD_NO}
	</select>
	
	<!-- 게시글 검색 개수 -->
	<select id="searchBoardCount" resultType="_int">
		SELECT COUNT(*) FROM BOARD B
		JOIN MEMBER M ON (B.MEMBER_NO = M.MEMBER_NO)
		WHERE B.BOARD_STATUS = 0
		<choose>
			<when test="writer != null">
				AND M.NICK_NAME LIKE '%' || #{writer} || '%'
			</when>
			<when test="title != null">
				AND BOARD_TITLE LIKE '%' || #{title} || '%'
			</when>
			<otherwise>
				AND BOARD_CONTENT LIKE '%' || #{content} || '%'
			</otherwise>
		</choose>
	</select>
	<!-- 검색 -->
	<select id="searchBoardList" resultType="java.util.HashMap" parameterType="java.util.List">
		SELECT * FROM BOARD B
		JOIN MEMBER M ON (B.MEMBER_NO = M.MEMBER_NO)
		WHERE B.BOARD_STATUS = 0
		<choose>
			<when test="writer != null">
				AND M.NICK_NAME LIKE '%' || #{writer} || '%'
			</when>
			<when test="title != null">
				AND BOARD_TITLE LIKE '%' || #{title} || '%'
			</when>
			<otherwise>
				AND BOARD_CONTENT LIKE '%' || #{content} || '%'
			</otherwise>
		</choose>
		ORDER BY BOARD_NO DESC
	</select>
	<!-- 댓글 조회(작성자, 내용, 날짜) -->
	<select id="commentList" resultType="java.util.HashMap" parameterType="java.util.List" resultMap="Comments">
		SELECT C.COMMENTS_CONTENT, C.COMMENTS_DATE, M.NICK_NAME, C.COMMENTS_NO, M.MEMBER_NO
		FROM COMMENTS C
		JOIN BOARD B ON(B.BOARD_NO = C.BOARD_NO)
		JOIN MEMBER M ON(C.MEMBER_NO = M.MEMBER_NO)
		WHERE C.BOARD_NO = #{BOARD_NO} AND C.COMMENTS_STATUS = 0
	</select>
	<!-- 댓글 수 -->
	<select id="commentListCount" resultType="_int">
		SELECT COUNT(*) FROM COMMENTS WHERE BOARD_NO = #{board_no} AND COMMENTS_STATUS = 0
	</select>
	<!-- 게시글 작성 #{writing_type} -> 카테고리 설정 -->
	<insert id="insertBoard">
		INSERT INTO BOARD
		VALUES(
			SEQ_BOARD_NO.NEXTVAL, 4, #{writing_type}, #{board_title}, #{board_content},
			#{member_no}, SYSDATE, SYSDATE, DEFAULT, DEFAULT
			)
	</insert>
	<!-- 게시글 수정 -->
	<update id="updateBoard">
		UPDATE BOARD SET WRITING_TYPE = #{writing_type}, BOARD_TITLE=#{board_title}, BOARD_CONTENT = #{board_content} WHERE BOARD_NO = #{board_no}
	</update>
	<!-- 게시글 삭제 -->
	<update id="deleteBoard">
		UPDATE BOARD SET BOARD_STATUS = 1 WHERE BOARD_NO = #{board_no}
	</update>
	
	<!-- 댓글 insert -->
	<insert id="insertComment">
		INSERT INTO COMMENTS VALUES(SEQ_COMMENTS_NO.NEXTVAL, #{COMMENTS_CONTENT}, #{BOARD_NO}, #{MEMBER_NO}, SYSDATE, 0)
	</insert>
	<!-- 댓글 delete -->
	<update id="deleteComment">
		UPDATE COMMENTS SET COMMENTS_STATUS = 1 WHERE COMMENTS_NO = #{comments_no}
	</update>
	
	<!-- 좋아요 수 -->
	<select id="selectLike" resultType="_int">
		SELECT COUNT(*) FROM MARKING WHERE BOARD_NO = #{board_no} AND MARKING_TYPE = 2
	</select>
	<!-- 좋아요 체크 여부(카운트) -->
	<select id="checkLike" resultType="_int">
		SELECT COUNT(*)
		FROM MARKING
		WHERE BOARD_NO = #{board_no} AND MEMBER_NO = #{member_no} AND MARKING_TYPE = 2
	</select>
	<!-- 좋아요 등록 -->
	<insert id="insertLike">
		INSERT INTO MARKING VALUES (SEQ_MARKING_NO.NEXTVAL, 2, SYSDATE, #{board_no}, #{member_no})
	</insert>
	<!-- 좋아요 삭제 -->
	<delete id="deleteLike">
		DELETE FROM MARKING WHERE BOARD_NO = #{board_no} AND MEMBER_NO = #{member_no} AND MARKING_TYPE = 2
	</delete>
	
	<!-- 북마크 체크 여부 -->
	<select id="checkBookMark" resultType="_int">
		SELECT COUNT(*) FROM MARKING WHERE BOARD_NO = #{board_no} AND MEMBER_NO = #{member_no} AND MARKING_TYPE = 1
	</select>
	<!-- 북마크  insert -->
	<insert id="insertBookMark">
		INSERT INTO MARKING VALUES (SEQ_MARKING_NO.NEXTVAL, 1, SYSDATE, #{board_no}, #{member_no})
	</insert>
	<!-- 북마크 delete -->
	<delete id="deleteBookMark">
		DELETE FROM MARKING WHERE BOARD_NO = #{board_no} AND MEMBER_NO = #{member_no} AND MARKING_TYPE = 1
	</delete>
	
	<!-- 홈트레이닝 목록 조회 -->
	<select id="selectHomeList" resultMap="homeResultSet">
        SELECT T.BOARD_TITLE, T.BOARD_DATE, T.BOARD_COUNT,T.NICK_NAME, T.FILES_ROOT, T.BOARD_NO,MEMBER_NO ,FF.FILES_ROOT as "PROFILE_ROOT", T.WRITING_TYPE
        FROM (     
            select b.board_title, b.board_date, b.board_count, 
                   me.nick_name, f.files_root, b.board_no,ME.MEMBER_NO, b.writing_type
            from board b
            join member me on (b.member_no = me.member_no)
            join marking m on (b.board_no = m.board_no)
            join files f on (b.board_no = f.f_reference_no)
            where marking_type = 2 and board_status = 0 and FILES_SECESSION = 0 and FILES_TYPE = #{files_type} and board_type=3
            group by b.board_title, m.board_no, b.board_title, b.board_date, b.board_count, me.nick_name, f.files_root, b.board_no,ME.MEMBER_NO, b.writing_type
            order by b.board_no desc
            ) T
        JOIN FILES FF ON ( FF.F_REFERENCE_NO = T.MEMBER_NO ) 
        AND FF.FILES_SECESSION = 0
        AND FF.FILES_TYPE = 1
	</select>
	
</mapper> 





























  