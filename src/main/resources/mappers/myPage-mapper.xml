<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!--Dao에서 Member.query로 작성을 했을 때 앞의 Member가 여기서 mapper의 namespace이고 query부분은 query의 이름부분이다.-->
<mapper namespace="MyPage">

	<resultMap type="com.kh.baraonda.myPage.model.vo.Point" id="pointResultSet">
		<id property="point_no" column="POINT_NO"/>
		<result property="member_no" column="MEMBER_NO"/>
		<result property="point_change_date" column="POINT_CHANGE_DATE"/>
		<result property="accrue_point" column="ACCRUE_POINT"/>
	</resultMap>
	
	<resultMap type="com.kh.baraonda.myPage.model.vo.Files" id="filesResultSet">
		<id property="files_no" column="FILES_NO"/>
		<result property="f_reference_no" column="F_REFERENCE_NO"/>
		<result property="files_title" column="FILES_TITLE"/>
		<result property="files_change_title" column="FILES_CHANGE_TITLE"/>
		<result property="files_type" column="FILES_TYPE"/>
		<result property="files_root" column="FILES_ROOT"/>
		<result property="files_secession" column="FILES_SECESSION"/>
	</resultMap>
	
	<resultMap type="com.kh.baraonda.myPage.model.vo.Footprints" id="footprintsResultSet">
		<id property="board_count" column="BOARD_COUNT"/>
		<result property="comments_count" column="COMMENTS_COUNT"/>
		<result property="marking_count" column="MARKING_COUNT"/>
		<result property="accrue_point" column="ACCRUE_POINT"/>
		<result property="enroll_date" column="ENROLL_DATE"/>
	</resultMap>
	
	<resultMap type="com.kh.baraonda.board.model.vo.Board" id="boardResultSet">
		<id property="board_no" column="BOARD_NO"/>
		<result property="board_type" column="BOARD_TYPE" />
		<result property="writing_type" column="WRITING_TYPE" />
		<result property="board_title" column="BOARD_TITLE" />
		<result property="board_content" column="BOARD_CONTENT"/>
		<result property="member_no" column="MEMBER_NO" />
		<result property="board_date" column="BOARD_DATE" />
		<result property="modify_date" column="MODIFY_DATE" />
		<result property="board_status" column="BOARD_STATUS" />
		<result property="board_count" column="BOARD_COUNT" />
	</resultMap>
	
	<resultMap type="com.kh.baraonda.myPage.model.vo.Marking" id="markingResultSet">
		<id property="marking_no" column="MARKING_NO"/>
		<result property="marking_type" column="MARKING_TYPE" />
		<result property="marking_date" column="MARKING_DATE" />
		<result property="board_no" column="BOARD_NO" />
		<result property="member_no" column="MEMBER_NO"/>
		<result property="marking_count" column="MARKING_COUNT"/>
		<result property="board_type" column="BOARD_TYPE"/>
		<result property="board_title" column="BOARD_TITLE"/>
	</resultMap>
	
	<resultMap type="com.kh.baraonda.myPage.model.vo.Comments" id="commentsResultSet2">
		<id property="comments_no" column="COMMENTS_NO"/>
		<result property="comments_content" column="COMMENTS_CONTENT" />
		<result property="board_no" column="BOARD_NO" />
		<result property="member_no" column="MEMBER_NO" />
		<result property="comments_date" column="COMMENTS_DATE"/>
		<result property="comments_status" column="COMMENTS_STATUS"/>
		<result property="board_title" column="BOARD_TITLE"/>
		<result property="board_type" column="BOARD_TYPE"/>
	</resultMap>
	
	<resultMap type="com.kh.baraonda.myPage.model.vo.PointRecord" id="pointRecordResultSet">
		<id property="point_record_no" column="POINT_RECORD_NO"/>
		<result property="point_no" column="POINT_NO" />
		<result property="point_record_date" column="POINT_RECORD_DATE" />
		<result property="before_point" column="BEFORE_POINT" />
		<result property="after_point" column="AFTER_POINT"/>
		<result property="point_type" column="POINT_TYPE"/>
	</resultMap>
	
	<resultMap type="com.kh.baraonda.myPage.model.vo.Orders" id="ordersResultSet">
		<id property="orders_no" column="ORDERS_NO"/>
		<result property="member_no" column="MEMBER_NO" />
		<result property="product_no" column="PRODUCT_NO" />
		<result property="orders_date" column="ORDERS_DATE" />
		<result property="orders_type" column="ORDERS_TYPE"/>
		<result property="product_quantity" column="PRODUCT_QUANTITY"/>
		<result property="banner_start_date" column="BANNER_START_DATE"/>
		<result property="banner_end_date" column="BANNER_END_DATE"/>
		<result property="banner_content" column="BANNER_CONTENT"/>
		<result property="addressee_name" column="ADDRESSEE_NAME"/>
		<result property="address" column="ADDRESS"/>
		<result property="addressee_phone" column="ADDRESSEE_PHONE"/>
		<result property="product_name" column="PRODUCT_NAME"/>
	</resultMap>
	
	<resultMap type="com.kh.baraonda.member.model.vo.Member" id="memberResultSet">
		<!--property부분은 Member클래스에 있는 필드와 같아야 하고, column은 DB의 컬럼명과 같다.-->
		<!--setter를 통해 자동으로 값을 넣기 때문에 해당 class에 setter가 생성되어 있어야 한다.-->
		<!--mid가 result가 아닌 id인 이유는 식별자로 사용되기 때문이다.-->
		<id property="member_no" column="MEMBER_NO"/>
		<result property="id" column="ID"/>
		<result property="password" column="PASSWORD"/>
		<result property="name" column="NAME"/>
		<result property="nick_name" column="NICK_NAME"/>
		<result property="phone" column="PHONE"/>
		<result property="token" column="TOKEN"/>
		<result property="enroll_date" column="ENROLL_DATE"/>
		<result property="modify_date" column="MODIFY_DATE"/>
		<result property="member_status" column="MEMBER_STATUS"/>
		<result property="admin_right" column="ADMIN_RIGHT"/>
		<result property="company_right" column="COMPANY_RIGHT"/>
		<result property="company_name" column="COMPANY_NAME"/>
		<result property="company_no" column="COMPANY_NO"/>
		<result property="bank" column="BANK"/>
		<result property="account" column="ACCOUNT"/>
		<result property="ceo_name" column="CEO_NAME"/>
		<result property="ceo_type" column="CEO_TYPE"/>
		<result property="self_introduction" column="SELF_INTRODUCTION"/>
		<result property="email" column="EMAIL"/>
		
	</resultMap>
	
	<resultMap type="com.kh.baraonda.exchange.model.vo.Product" id="productResultSet">
		<id property="product_no" column="PRODUCT_NO"/>
		<result property="product_name" column="PRODUCT_NAME"/>
		<result property="product_price" column="PRODUCT_PRICE"/>
		<result property="product_type" column="PRODUCT_TYPE"/>
		<result property="point_step" column="POINT_STEP"/>
	</resultMap>
	
	<resultMap type="com.kh.baraonda.myPage.model.vo.Message" id="messageResultSet">
		<id property="message_no" column="MESSAGE_NO"/>
		<result property="message_title" column="MESSAGE_TITLE"/>
		<result property="message_content" column="MESSAGE_CONTENT"/>
		<result property="message_date" column="MESSAGE_DATE"/>
		<result property="dispatch_member_no" column="DISPATCH_MEMBER_NO"/>
		<result property="dispatch_nickname" column="DISPATCH_NICKNAME"/>
		<result property="receive_member_no" column="RECEIVE_MEMBER_NO"/>
		<result property="receive_nickname" column="RECEIVE_NICKNAME"/>
		<result property="check_date" column="CHECK_DATE"/>
	</resultMap>
	
	
	
	<select id="selectFootprints" resultMap="footprintsResultSet" parameterType="Footprints">
	
		SELECT BOARD_COUNT, COMMENTS_COUNT, MARKING_COUNT, ACCRUE_POINT, ENROLL_DATE
	
		FROM 
	    	(SELECT  COUNT(BOARD_NO) BOARD_COUNT FROM BOARD 
		    WHERE MEMBER_NO = #{member_no} AND BOARD_STATUS = 0),
	    
	  		(SELECT COUNT(COMMENTS_NO) COMMENTS_COUNT FROM COMMENTS
	  		WHERE MEMBER_NO = #{member_no} AND COMMENTS_STATUS = 0),
  		
		    (SELECT COUNT(M.MARKING_NO) MARKING_COUNT FROM MARKING M
		  	JOIN BOARD B ON(M.BOARD_NO = B.BOARD_NO)
		    WHERE B.MEMBER_NO = #{member_no} AND M.MARKING_TYPE = 2),
	    
		    (SELECT ENROLL_DATE FROM MEMBER
		    WHERE MEMBER_NO = #{member_no}),
	    
		    (SELECT ACCRUE_POINT FROM POINT WHERE POINT_NO = ${member_no})
	</select>
	
	
	<select id="selectPoint" resultMap="pointResultSet" parameterType="Point">
		SELECT * FROM POINT
		WHERE POINT_NO = #{member_no}
	</select>
	
	<update id="updateMemberInfo" parameterType="_int">
		UPDATE MEMBER SET PASSWORD = '${password}', NICK_NAME = '${nick_name}' WHERE MEMBER_NO = ${member_no}
	</update>
	
	<insert id="insertPhoto" parameterType="Files">
		INSERT INTO FILES
		VALUES(
			SEQ_FILES_NO.NEXTVAL, #{f_reference_no},
			 #{files_title}, #{files_change_title}, 
			 #{files_type}, #{files_root}, 0
		)
	
	</insert>
	
	<select id="selectPhoto"  resultMap="filesResultSet" parameterType="Files">
		SELECT RANK, FILES_NO, F_REFERENCE_NO, FILES_TITLE, FILES_TYPE, FILES_ROOT, FILES_SECESSION, FILES_CHANGE_TITLE 
		FROM(
			SELECT RANK() OVER (ORDER BY FILES_NO DESC) AS RANK,
			FILES_NO, F_REFERENCE_NO, FILES_TITLE, FILES_TYPE, FILES_ROOT, FILES_SECESSION, FILES_CHANGE_TITLE 
			FROM FILES WHERE F_REFERENCE_NO = #{member_no} AND FILES_TYPE = 1 AND FILES_SECESSION = 0 
         ) WHERE RANK BETWEEN 1 AND 1
	
	</select>
	
	<select id="selectListCount" resultType="_int">
		SELECT COUNT(*)
		FROM BOARD
		WHERE BOARD_STATUS = '0' AND MEMBER_NO = #{member_no}
	</select>
	
	
	<!-- 게시글 목록 조회 -->
	<select id="selectBoardList" resultMap="boardResultSet">
		SELECT * FROM BOARD 
		WHERE BOARD_STATUS = '0' AND MEMBER_NO = #{member_no}
		ORDER BY BOARD_NO DESC
	</select>
	
	<!--추천 개수 조회-->
	<select id="selectLikeCount" resultMap="markingResultSet">
		SELECT COUNT(M.MARKING_NO) MARKING_COUNT, B.BOARD_NO FROM MARKING M
    	JOIN BOARD B ON(M.BOARD_NO = B.BOARD_NO)
  		WHERE B.MEMBER_NO = #{member_no} group by B.BOARD_NO
	</select>
	
	<!--댓글 목록 개수 조회-->
	<select id="selectCommentsListCount" resultType="_int">
		SELECT COUNT(*)
		FROM COMMENTS
		WHERE COMMENTS_STATUS = '0' AND MEMBER_NO = #{member_no}
	</select>
	
	
	<!--댓글 목록 조회-->
	<select id="selectCommentList" resultMap="commentsResultSet2">
		SELECT C.COMMENTS_NO, C.COMMENTS_CONTENT, C.BOARD_NO, C.MEMBER_NO, C.COMMENTS_DATE, C.COMMENTS_STATUS
                ,B.BOARD_TITLE, B.BOARD_TYPE FROM COMMENTS C 
        JOIN BOARD B ON(C.BOARD_NO = B.BOARD_NO)
		WHERE C.COMMENTS_STATUS = '0' AND C.MEMBER_NO = #{member_no}
		ORDER BY COMMENTS_NO DESC
	</select>
	
	<!--북마크 목록 개수 조회-->
	<select id="selectBookMarkListCount" resultType="_int">
		SELECT COUNT(*)
   		FROM MARKING
    	WHERE MARKING_TYPE = 1 AND MEMBER_NO = #{member_no}
	</select>
	
	<!--북마크 목록 조회-->
	<select id="selectBookMarkList" resultMap="markingResultSet">
		SELECT M.MARKING_NO, M.MARKING_TYPE, M.MARKING_DATE, M.BOARD_NO,
        M.MEMBER_NO, B.BOARD_TYPE, B.BOARD_TITLE FROM MARKING  M
    	JOIN BOARD B ON(B.BOARD_NO = M.BOARD_NO)
   		WHERE M.MARKING_TYPE = 1 AND M.MEMBER_NO = #{member_no}
	</select>
	
	<!--경험치 획득 목록 개수 조회-->
	<select id="selectPointListCount" resultType="_int">
		SELECT COUNT(*)
	    FROM POINT_RECORD
	    WHERE POINT_NO = #{member_no}
	</select>
	
	<!--경험치 획득 목록 조회-->
	<select id="selectPointList" resultMap="pointRecordResultSet">
		SELECT *
	    FROM POINT_RECORD
	    WHERE POINT_NO = #{member_no}
	</select>
	
	<!--교환한 상품 목록 개수 조회-->
	<select id="selectChangeGoodsListCount" resultType="_int">
		SELECT COUNT(*)
 	    FROM ORDERS
 	    WHERE MEMBER_NO = #{member_no} AND ORDERS_TYPE = 1
	</select>
	
	
	
	<!--교환한 상품 목록 조회-->
	<select id="selectChangeGoodsList" resultMap="ordersResultSet">
		SELECT O.ORDERS_NO, O.MEMBER_NO, O.PRODUCT_NO,
		O.ORDERS_DATE, O.ORDERS_TYPE, 
		A.ADDRESSEE_NAME, A.ADDRESS, A.ADDRESSEE_PHONE,
		P.PRODUCT_NAME
		FROM ORDERS O
		JOIN ADDRESS A ON(O.MEMBER_NO = A.MEMBER_NO)
		JOIN PRODUCT P ON(O.PRODUCT_NO = P.PRODUCT_NO)
		WHERE O.MEMBER_NO = #{member_no} AND O.ORDERS_TYPE = 1
	</select>
	
	
	<!--회원 정보 뷰-->
	<select id="selectMemberView"  resultMap="memberResultSet">
		SELECT * FROM MEMBER WHERE MEMBER_NO = #{member_no}
	</select>
	
	<select id="selectProductList" resultMap="productResultSet">
		SELECT * FROM PRODUCT WHERE PRODUCT_TYPE = 1
	</select>
	
	<!--이메일 등록-->
	<update id="updateEmail" parameterType="_int">
		UPDATE MEMBER SET EMAIL = '${email}' WHERE MEMBER_NO = ${member_no}
	</update>
	
	<!--닉네임 변경-->
	<update id="updateNick" parameterType="_int">
		UPDATE MEMBER SET NICK_NAME = '${nick_name}' WHERE MEMBER_NO = ${member_no}
	</update>
	
	<!--비밀번호 변경-->
	<update id="updatePwd" parameterType="_int">
		UPDATE MEMBER SET PASSWORD = '${password}' WHERE MEMBER_NO = ${member_no}
	</update>
	
	<!--아이디 찾기 이메일 전송 전 일치값이 있는지 확인-->
	<select id="selectId" resultMap="memberResultSet">
		SELECT * 
		FROM MEMBER
		WHERE NAME = #{name}
		AND EMAIL = #{email}
		AND MEMBER_STATUS = 0
	</select>
	
	<!--비번변경 시 이메일 전송 전 일치값이 있는지 확인-->
	<select id="selectPwd" resultMap="memberResultSet">
		SELECT * 
		FROM MEMBER
		WHERE ID = #{id}
		AND NAME = #{name}
		AND EMAIL = #{email}
		AND MEMBER_STATUS = 0
	</select>
	
	<!--비밀번호 변경2-->
	<update id="updatePwd2" parameterType="_int">
		UPDATE MEMBER SET PASSWORD = '${password}' WHERE ID = '${id}'
	</update>	
	
	<!--사진 삭제 -->
	<update id="updateDelPhoto" parameterType="_int">
		UPDATE FILES SET FILES_SECESSION = 1  WHERE F_REFERENCE_NO = #{member_no}
	</update>	
	
	<!--회원탈퇴 -->
	<update id="updateStatus" parameterType="_int">
		UPDATE MEMBER SET MEMBER_STATUS = 1  WHERE MEMBER_NO = #{member_no}
	</update>
	
	<!--메세지 개수 조회 -->	
	<select id="selectMessageListCount" resultType="_int">
		SELECT COUNT(*)
  		FROM MESSAGE
   		WHERE DISPATCH_MEMBER_NO = #{member_no} OR RECEIVE_MEMBER_NO = #{member_no}
	</select>	
	
	<!--메세지 리스트 조회 -->	
	<select id="selectMessageList" resultMap="messageResultSet">
		SELECT MESSAGE_NO, MESSAGE_TITLE, MESSAGE_CONTENT, MESSAGE_DATE, DISPATCH_MEMBER_NO, RECEIVE_MEMBER_NO, CHECK_DATE,
                        M1.NICK_NAME DISPATCH_NICKNAME, M2.NICK_NAME RECEIVE_NICKNAME
		       	FROM  MESSAGE ME
                JOIN MEMBER M1 ON(M1.MEMBER_NO = ME.DISPATCH_MEMBER_NO)
                JOIN MEMBER M2 ON(M2.MEMBER_NO = ME.RECEIVE_MEMBER_NO)
		        WHERE DISPATCH_MEMBER_NO = #{member_no} OR RECEIVE_MEMBER_NO = #{member_no}
		        ORDER BY MESSAGE_DATE DESC
	</select>
	
	<!--닉네임으로 회원번호 조회 -->	
	<select id="selectNicksNo" resultMap="memberResultSet">
		SELECT MEMBER_NO
		FROM MEMBER
		WHERE NICK_NAME = #{receive_nickname}
		AND MEMBER_STATUS = 0
	</select>
	
	<!--쪽지 전송 -->
	<insert id="insertMsg" parameterType="Message">
		INSERT INTO MESSAGE
		VALUES(
			SEQ_MESSAGE_NO.NEXTVAL, #{message_title}, #{message_content}, 
			SYSDATE, #{dispatch_member_no}, #{receive_member_no}, null
		)
	
	</insert>
	
	<!--message detail -->	
	<select id="selectMsgOne" resultMap="messageResultSet">
		SELECT MESSAGE_NO, MESSAGE_TITLE, MESSAGE_CONTENT, MESSAGE_DATE, DISPATCH_MEMBER_NO, RECEIVE_MEMBER_NO, CHECK_DATE,
                        M1.NICK_NAME DISPATCH_NICKNAME, M2.NICK_NAME RECEIVE_NICKNAME
		FROM  MESSAGE ME
                JOIN MEMBER M1 ON(M1.MEMBER_NO = ME.DISPATCH_MEMBER_NO)
                JOIN MEMBER M2 ON(M2.MEMBER_NO = ME.RECEIVE_MEMBER_NO)
	        WHERE MESSAGE_NO = #{message_no}
	        ORDER BY MESSAGE_DATE DESC
	</select>	
	
	
	
</mapper>



